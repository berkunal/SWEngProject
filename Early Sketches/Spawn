package com.tutorial.main;

import java.util.Random;

import com.tutorial.main.Game.STATE;

public class Spawn {
	
	int time = 0;
	
	
	private Handler handler;
	private HUD hud;
	
	
	private Random r = new Random();
	
	
	
	
	private int scoreKeep = 0;
	
	public Spawn(Handler handler, HUD hud){
		
		this.handler = handler;
		this.hud = hud;
		
		
		
		
	}
	
	public void tick(){
		
		time++;
						
		
		if(time == 20){scoreKeep++; time=0;}
		
		if(scoreKeep == 30){
			
			
			hud.setLevel(hud.getLevel() + 1 );
			
			
					//another timer	
			
			
			if(hud.getLevel() == 2){  //if statement is meaningless
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				
			}		
			
			scoreKeep++ ;
			
		}
		
		
		if(scoreKeep == 60){
			
			hud.setLevel(hud.getLevel() + 1 );
			
			if(hud.getLevel() == 3){  //if statement is meaningless
				
				//another spawn
				
				
				handler.addObject(new BasicEnemy(100, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(200, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(300, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(400, 0, ID.BasicEnemy, handler));
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				
				
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));				
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				
				
			}
			scoreKeep++ ;
			
		}
		
		
		if(scoreKeep == 90){
			
			hud.setLevel(hud.getLevel() + 1 );
			
			if(hud.getLevel() == 4){  //if statement is meaningless
				
				//another spawn
				
				
				handler.addObject(new BasicEnemy(100, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(200, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(300, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(400, 0, ID.BasicEnemy, handler));
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				
				
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				
				
			}
			scoreKeep++ ;
			
		}
		
		if(scoreKeep == 120){
			
			hud.setLevel(hud.getLevel() + 1 );
			
			if(hud.getLevel() == 5){  //if statement is meaningless
				
				//another spawn
				
				
				handler.addObject(new BasicEnemy(100, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(200, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(300, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(400, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				
				
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				
				
			}
			scoreKeep++ ;
			
		}
		
		if(scoreKeep == 130){
			
			
			
			if(hud.getLevel() == 6){  //if statement is meaningless
				
				//another spawn
				
				
				handler.addObject(new BasicEnemy(100, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(200, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(300, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(400, 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				
				
			}
			scoreKeep++ ;
			
		}
		
		if(scoreKeep == 135){
			
			hud.setLevel(hud.getLevel() + 1 );
			
			if(hud.getLevel() == 6){  //if statement is meaningless
				
				//another spawn
				
				
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				handler.addObject(new Enemy1(r.nextInt(Game.WIDTH-32), 0, ID.Enemy, handler));
				
				
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH-32), 0, ID.BasicEnemy, handler));
				
				
				
			}
			scoreKeep++ ;
			
		}
		
		
		
		
	}
	
	

}
