package com.tutorial.main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Random;

public class Game extends Canvas implements Runnable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1550691097823471818L;
	
	public static final int WIDTH = 1024, HEIGHT = 768; // WIDTH / 12*9;
	
	private Thread thread;
	private boolean running = false;
	
	
	
	private BufferedImage image = new BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_INT_RGB);	
	
	
	private Handler handler;
	
	private Random r;
	
	private HUD hud;
	private Spawn spawner;
	
	private Menu menu;
	
	
	public enum STATE{
		
		Menu,
		Help,
		Game, 
		End
		
	};
	
	
	public STATE gameState = STATE.Menu; // GAME OR MENU!!!!!!
	
	
	
	public Game(){
		
		handler = new Handler();
		hud = new HUD();		
		menu = new Menu(this, handler, hud);
		
		this.addKeyListener(new KeyInput(handler)); // detect keyboard 
		this.addMouseListener(menu);  // detect mouse in menu
		
		new Window(WIDTH, HEIGHT, "MY JAVA PROJECT!", this);
		
		
		spawner = new Spawn(handler, hud);  //under the hud	 SPAWN!!!!!!!!
		
		
		
		
		if(gameState == STATE.Game){
			

			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			handler.addObject(new Player(300,300, ID.Player, handler, this)); //where the player start
			//handler.addObject(new Player(100,150, ID.Player, handler)); //you can create another one
			
			handler.addObject(new Enemy1(100,100, ID.Enemy, handler));
			handler.addObject(new Enemy1(200,100, ID.Enemy, handler));
			handler.addObject(new Enemy1(300,100, ID.Enemy, handler));
			handler.addObject(new Enemy1(400,100, ID.Enemy, handler)); 
			
			r = new Random();
			/*
			for(int i=0; i<10; i++){
				
				handler.addObject(new Enemy1(r.nextInt(WIDTH),50, ID.Enemy));
				
			}*/
			
			//handler.addObject(new Player(300,200, ID.Player2));
			
			handler.addObject(new BasicEnemy(300,50, ID.BasicEnemy, handler));
			handler.addObject(new BasicEnemy(150,50, ID.BasicEnemy, handler));
			handler.addObject(new BasicEnemy(380,50, ID.BasicEnemy, handler));
			handler.addObject(new BasicEnemy(450,50, ID.BasicEnemy, handler));
			
			
			
			
		}else{
			
			r = new Random();
			
			for(int i=0; i< 30; i++){
				
				handler.addObject(new MenuParticle(r.nextInt(WIDTH),r.nextInt(HEIGHT), ID.MenuParticle, handler));
				
			}
		}
		
			
		
		
		
		
		
	}

	public synchronized void start(){
		
		thread = new Thread(this);
		thread.start();
		running = true;
		
		
		
	}
	
	
	public synchronized void stop(){
		
		try{
			
			thread.join();
			running = false;
						
		}catch(Exception e){
			e.printStackTrace();
			
		}
		
		
	}

	public void run(){    //General game loop 
		
		this.requestFocus();
	
		
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				tick();
				delta--;
								
			}
			
			if(running)
				render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				//System.out.println("FPS: " + frames);
				frames=0;
				
			}
		}
		stop();	
		
		
	}

	private void tick(){
		
		handler.tick();
		
		if(gameState == STATE.Game){
			
			hud.tick();
			spawner.tick();
			
			if(HUD.HEALTH <= 0){
				HUD.HEALTH = 100;
				
				gameState = STATE.End;
				handler.clearEnemys();
				r = new Random();
				
				for(int i=0; i< 30; i++){
					
					handler.addObject(new MenuParticle(r.nextInt(WIDTH),r.nextInt(HEIGHT), ID.MenuParticle, handler));
					
				}
				
			}
			
			
		}else if(gameState == STATE.Menu || gameState == STATE.End){
			
			menu.tick();
			
			
		}
		
		
		
		
		
	}
	
	private void render(){
		
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null){
			this.createBufferStrategy(3);  // 3 buffer
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
				
		//g.setColor(Color.cyan);  // flash is gonna be "black,cyan.."
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
		
		//g.drawImage(player,100,100,this);
		
		
		
		handler.render(g);
		
		
		if(gameState == STATE.Game){
			
			hud.render(g);
			
			
		}else if(gameState == STATE.Menu || gameState == STATE.Help || gameState == STATE.End){
			
			menu.render(g);
			
			
		}
			
		
		
		
		
		g.dispose();
		bs.show();
		
		
	}
	
	
	
	public static int clamp(int var, int min, int max){
		
		if(var >= max)
			return var = max;
		else if(var <= min)
			return var = min;
		else
			return var;
	}
	
	
	public static void main(String args[]){
		
		new Game();
		
		
	}
}
